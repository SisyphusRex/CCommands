Referencing and Dereferencing
    Referencing
        Act of obtaining memory address of variable using &
            int myNum = 2;
            int* ptr = &myNum;
    Dereferencing
        Act of obtaining value at memory address held by pointer
            int myNum = 2;
            int* ptr = &myNum;
            int value = *ptr;

    You can change myNum by:
        1. myNum = 3;
        OR
        2. *ptr = 3;

Increment Operator ++
    1. To increment value:
        int myNum = 2;
        int* ptr = &myNum;
        (*ptr)++;
    2. Increment pointer
        *p++ OR *(p++)
        but returns original value

Printing Memory address
    %p is format specifier for pointer memory address in hexadecimal
    expects void* type
    printf("%p", (void*) ptr)
    OR
    printf("%p", (void*) myVal);

Always initialize pointer:
    dereferencing a null or uninitialized pointer leads to run time error
        char* ptr;
        *ptr = 'A';  <---assigns value to unknown address
        printf("%c", *ptr);
        RUNTIME error

malloc():
    memory allocation of some bytes and returns void* pointer
    use sizeof() to get bytes needed for type
        int* myPtr = NULL;
        myPtr = (int*) malloc(sizeof(int));
free():
    opposite of malloc()
    free(myPtr);

Struct Pointer Member Access:
    typedef struct Fruit_struct {
        int hasSeeds;
    } Fruit;
    Fruit* orange;
    orange->hasSeeds = 1; OR (*orange).hasSeeds = 1;

    orange->hasSeeds
    is equivalent to 
    (*orange).hasSeeds

realloc():
    increase or decrease pointer memory block
    myPtr = (type*)realloc(myPtr, numElements * sizeof(type));

Array Pointers:
    arr[x] is equivalent to *(arr + x)
